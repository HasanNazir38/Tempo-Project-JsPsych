"use strict";var _shifter=require("/plugin-tempochanger/shifter.js");Object.defineProperty(exports,"__esModule",{value:!0}),exports.jsPsychTempoChanger=void 0;function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,_toPropertyKey(c.key),c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),Object.defineProperty(a,"prototype",{writable:!1}),a}function _toPropertyKey(a){var b=_toPrimitive(a,"string");return"symbol"===_typeof(b)?b:b+""}function _toPrimitive(a,b){if("object"!==_typeof(a)||null===a)return a;var c=a[Symbol.toPrimitive];if(c!==void 0){var d=c.call(a,b||"default");if("object"!==_typeof(d))return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===b?String:Number)(a)}var jsPsychTempoChanger=exports.jsPsychTempoChanger=function(a){// will need an export thnig if you go that route
"use strict";var b={name:"Tempo-Changer",parameters:{// The audio file for the specific trial
stimulus:{type:a.ParameterType.AUDIO,default:void 0},// Start tempo (in ms)
startTempo:{type:a.ParameterType.INT,default:800// 75 bpm
},// The factor at which the tempo changes
changeRate:{type:a.ParameterType.INT,default:.02},// Margin for the start tempo
jitter:{type:a.ParameterType.INT,default:10},// Parameters for drawing the joystick
joyParameters:{type:a.ParameterType.KEYS,default:{internalFillColor:"#d41313",externalStrokeColor:"#d41313"}},// Number of fractional digits in the data
precision:{type:a.ParameterType.INT,default:2},// Title text at the top of the page
title:{type:a.ParameterType.STR,default:null},// Text above the Joystick Box
prompt:{type:a.ParameterType.STR,default:"Use the joystick to adjust tempo"}// maybe add something for experiment block, trial, id, etc so that the output file looks like how it does before
}},c=/*#__PURE__*/function(){function a(b){_classCallCheck(this,a),this.jsPsych=b}return _createClass(a,[{key:"trial",value:function trial(a,b){// Data array with tempo at timestamp in seconds
//////////////// FUNCTIONS
//Key Component Fns//
function c(a){r&&r.off(),r=new _shifter.PitchShifter(q,a,1024),e(),r.tempo=y/100,r.pitch=1,r.on("play",function(a){z=!0}),g(y)}// Function to change the tempo of the audio
// takes an int representing the new tempo of the audio as a percentage
function d(a){r.tempo=a/100,r.pitch=1}// Function to randomly add or subtract a percentage from the tempo based on the "margin" const
function e(){var a=Math.floor,b=a(2*Math.random())+1,c=Math.random()*u;switch(console.log(b),b){case 1:y+=c,x+=c;case 2:y-=c,x-=c}}// Data handling Fns //
// Runs when the next button is pressed, ending the trial
//    --this should maybe pass on the audio tempo or something? for the tap task
function f(){a.innerHTML="",z=!1;var c={stimulus:b.stimulus,tempoData:A,startTempo:x,endTempo:y// might need to add block, stim#, and trial#, could be done in experiment js
};this.jsPsych.finishTrial(c)}// Pushes the tempo change at its time stamp to the data array
function g(a){var b=h().toFixed(v);a=a.toFixed(v),A.push({t:a,stamp:b})}// Finds the current time elapsed from the beginning of the trial and converts it to seconds
function h(){var a=new Date().getTime()-w;return a/1e3}//Joystick Reacting Fns
// Reads the joystick position and adjusts tempo
function i(a){var b=a*t;1>y?(y=1,console.log("Tempo at Minimum")):(y+=b,0>b?console.log("Decreasing Tempo"):console.log("Increasing Tempo")),g(y),d(y)}// Fn that reads when the stick is pressed and begins the tempo changing
// Fn that continuously updates the y value of the stick while stick is pressed
function j(){s=setInterval(i(p.GetY()),500)}// Fn that reads when the joystick is no longer being used
function k(){clearInterval(s),n.removeEventListener("mouseup",k),n.removeEventListener("mousemove",j),console.log("stick unpressed"),console.log(A)}// Data Handling
// var trial_data = {
//   stimulus: trial.stimulus, 
//   tempoData: tempoDataPoints, 
//   startTempo: trueTempo,
//   endTempo: tempo,
// };
//this.jsPsych.finishTrial(trial_data);
var l=this,m="<div id=\"experimentContainer\" class=\"container\"><div id=\"joyBox\" class=\"container\"><div id=\"pointerUp\" class=\"pointer\"></div><div id=\"joyDiv\" class=\"joyStick\"></div><div id=\"pointerDown\" class=\"pointer\"></div><div id=\"nextButton\" class=\"nextButton\"></div></div></div>";// Set up the page participant controls
null!==b.prompt&&(m="<p>"+b.prompt+"</p>"+m),null!==b.title&&(m="<h1>"+b.title+"</h1>"+m),a.innerHTML=m;// Finds the joystick and next button
var n=a.querySelector(".joyStick"),o=a.querySelector(".nextButton"),p=new JoyStick("joyDiv",b.joyParameters),q=this.jsPsych.pluginAPI.audioContext();// Set up the joystick
//Load and play audio
console.log(q),this.jsPsych.pluginAPI.getAudioBuffer(b.stimulus).then(function(a){null===q?(console.log("this should not be running :'( "),l.audio=a,l.audio.currentTime=0,l.audio.play()):(q.createBufferSource(),c(a),r.connect(q.destination))})["catch"](function(a){console.error("Failed to load audio file \"".concat(b.stimulus,"\"")),console.error(a)});////////////////////  Variables and Constants
var r,s,t=b.changeRate,u=b.jitter,v=b.precision,w=new Date().getTime(),x=b.startTempo,y=100,z=!1,A=[];// How often the update set interval thing runs
// Percentage of variability of the starting tempo (aka Jitter)
// Number of digits to round data to
// The time at which the trial starts in ms
// True tempo of the audio file in ms
// Tempo of the audio file as a percentage
// Becomes the PitchShifter variable
// Boolean to indicate audio playing
// Used to update the Y value of the joystick with pressed                    
n.addEventListener("mousedown",function a(){console.log("stick pressed"),n.addEventListener("mousemove",j),n.addEventListener("mouseup",k)}),o.addEventListener("click",f)}}]),a}();/**
   * **PLUGIN-NAME**
   *
   * SHORT PLUGIN DESCRIPTION
   *
   * @author HASAN NAZIR
   * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}
   */return c.info=b,c}(jsPsychModule);

//# sourceMappingURL=index.browser.min.js.map